"""
Start handler module
Handles /start command and worker registration flow
"""

from telebot import TeleBot
from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import logging

from config import ADMIN_IDS
import sheets

logger = logging.getLogger(__name__)

# Get bot instance from main module
bot: TeleBot = None

def init_bot(bot_instance: TeleBot):
    """Initialize bot instance"""
    global bot
    bot = bot_instance
    register_handlers()

def register_handlers():
    """Register all handlers for this module"""
    bot.message_handler(commands=['start'])(handle_start)
    bot.callback_query_handler(func=lambda call: call.data.startswith('approve_'))(handle_approve)
    bot.callback_query_handler(func=lambda call: call.data.startswith('decline_'))(handle_decline)

def handle_start(message: Message):
    """Handle /start command"""
    tg_id = message.from_user.id
    username = message.from_user.username or "unknown"
    
    # Check if user is admin
    if tg_id in ADMIN_IDS:
        bot.reply_to(
            message, 
            "üîß –í—ã –∞–¥–º–∏–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
        )
        return
    
    # Check worker status
    worker = sheets.get_worker(tg_id)
    
    if worker:
        role = worker.get("role")
        if role == "worker":
            show_cabinet(message)
        elif role == "pending":
            bot.reply_to(
                message, 
                "‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏."
            )
        elif role == "declined":
            bot.reply_to(
                message, 
                "üõë –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–∞—á–∏."
            )
        else:
            bot.reply_to(
                message, 
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    else:
        # Add new worker with pending status
        sheets.add_worker(tg_id, username)
        
        # Notify admins
        notify_admins_new_worker(tg_id, username)
        
        bot.reply_to(
            message, 
            "üìù –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. "
            "–û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )

def show_cabinet(message: Message):
    """Show worker cabinet"""
    tg_id = message.from_user.id
    worker = sheets.get_worker(tg_id)
    
    if not worker:
        bot.reply_to(message, "‚ùå –†–∞–±–æ—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    clients_count = worker.get("clients_count", 0)
    balance = worker.get("balance", 0.0)
    
    text = f"""üë§ <b>–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>

‚Äî –ö–ª–∏–µ–Ω—Ç–æ–≤: {clients_count}
‚Äî –ë–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ"""
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data="add_client"),
        InlineKeyboardButton("üí∏ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É", callback_data="request_withdrawal")
    )
    
    bot.send_message(message.chat.id, text, reply_markup=keyboard)

def notify_admins_new_worker(tg_id: int, username: str):
    """Notify admins about new worker registration"""
    text = f"üìã <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\nID: {tg_id}"
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{tg_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{tg_id}")
    )
    
    for admin_id in ADMIN_IDS:
        try:
            bot.send_message(admin_id, text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"Failed to notify admin {admin_id}: {e}")

def handle_approve(call: CallbackQuery):
    """Handle worker approval"""
    if call.from_user.id not in ADMIN_IDS:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    tg_id = int(call.data.split('_')[1])
    
    try:
        sheets.approve_worker(tg_id)
        bot.edit_message_text(
            f"‚úÖ –†–∞–±–æ—Ç–Ω–∏–∫ {tg_id} –æ–¥–æ–±—Ä–µ–Ω",
            call.message.chat.id,
            call.message.message_id
        )
        
        # Notify worker
        try:
            bot.send_message(
                tg_id, 
                "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. "
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–≤–æ–µ–º—É –∫–∞–±–∏–Ω–µ—Ç—É."
            )
        except Exception as e:
            logger.error(f"Failed to notify worker {tg_id}: {e}")
            
    except Exception as e:
        logger.error(f"Failed to approve worker {tg_id}: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏")



def handle_decline(call: CallbackQuery) -> None:
    """Handle worker decline"""
    if call.from_user.id not in ADMIN_IDS:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return

    tg_id = int(call.data.split('_')[1])

    try:
        sheets.decline_worker(tg_id)
        bot.edit_message_text(
            f"‚ùå –ó–∞—è–≤–∫–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ {tg_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id
        )
        # Notify worker
        try:
            bot.send_message(
                tg_id,
                "üõë –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
            )
        except Exception as e:
            logger.error(f"Failed to notify worker {tg_id}: {e}")
    except Exception as e:
        logger.error(f"Failed to decline worker {tg_id}: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏")
