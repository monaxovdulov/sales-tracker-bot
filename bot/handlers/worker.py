"""
Worker handler module
Handles worker functionality: cabinet, adding clients, withdrawal requests
"""

import datetime
from telebot import TeleBot
from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import logging

import sheets
from services import commission, receipts
from utils.validators import is_phone, is_money, normalize_money, is_url
from fsm import fsm, States

logger = logging.getLogger(__name__)

# Bot instance
bot: TeleBot = None

def init_bot(bot_instance: TeleBot):
    """Initialize bot instance"""
    global bot
    bot = bot_instance
    register_handlers()

def register_handlers():
    """Register all handlers for this module"""
    bot.message_handler(commands=['cabinet'])(handle_cabinet)
    bot.callback_query_handler(func=lambda call: call.data == 'add_client')(start_add_client)
    bot.callback_query_handler(func=lambda call: call.data == 'request_withdrawal')(start_withdrawal)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
    bot.message_handler(commands=['cancel'])(handle_cancel)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM (–ù–ï –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
    bot.message_handler(func=lambda message: _is_fsm_text_state(message), content_types=['text'])(handle_text_message)
    bot.message_handler(func=lambda message: _is_fsm_media_state(message), content_types=['photo', 'document'])(handle_media_message)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM (–ù–ï –¥–ª—è –≤—Å–µ—Ö callback'–æ–≤)
    bot.callback_query_handler(func=lambda call: _is_fsm_callback_state(call))(handle_callback_query)

def _is_fsm_text_state(message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_state = fsm.get_state(message.from_user.id, message.chat.id)
    text_states = [
        States.CLIENT_PHONE,
        States.CLIENT_NAME, 
        States.CLIENT_ORDER_LINK,
        States.CLIENT_AMOUNT,
        States.CLIENT_RECEIPT,  # –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —á–µ–∫–∞
        States.WITHDRAWAL_AMOUNT
    ]
    return user_state in text_states

def _is_fsm_media_state(message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM –¥–ª—è –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_state = fsm.get_state(message.from_user.id, message.chat.id)
    return user_state == States.CLIENT_RECEIPT

def _is_fsm_callback_state(call) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ callback —á–∞—Å—Ç—å—é –ø—Ä–æ—Ü–µ—Å—Å–∞ FSM"""
    user_state = fsm.get_state(call.from_user.id, call.message.chat.id)
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è callback'–æ–≤
    callback_states = [
        States.CLIENT_MESSENGER,
        States.CLIENT_STATUS,
        States.CLIENT_CONFIRM
    ]
    
    if user_state in callback_states:
        return True
    
    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ callback –¥–∞–Ω–Ω—ã–µ –¥–ª—è FSM
    fsm_callbacks = [
        'messenger_', 'status_', 'confirm_'
    ]
    
    return any(call.data.startswith(prefix) for prefix in fsm_callbacks)

def handle_cabinet(message: Message):
    """Handle /cabinet command"""
    from handlers.start import show_cabinet
    show_cabinet(message)

def handle_cancel(message: Message):
    """Handle /cancel command - cancel current state"""
    user_state = fsm.get_state(message.from_user.id, message.chat.id)
    
    if user_state:
        fsm.clear_state(message.from_user.id, message.chat.id)
        bot.reply_to(message, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        logger.info(f"User {message.from_user.id} canceled state: {user_state}")
    else:
        bot.reply_to(message, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã")

def start_add_client(call: CallbackQuery):
    """Start adding client process"""
    bot.answer_callback_query(call.id)
    fsm.set_state(call.from_user.id, call.message.chat.id, States.CLIENT_PHONE)
    bot.send_message(call.message.chat.id, "üìû –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, 10-15 —Å–∏–º–≤–æ–ª–æ–≤):")

def handle_text_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    user_state = fsm.get_state(message.from_user.id, message.chat.id)
    
    if user_state == States.CLIENT_PHONE:
        process_phone(message)
    elif user_state == States.CLIENT_NAME:
        process_name(message)
    elif user_state == States.CLIENT_ORDER_LINK:
        process_order_link(message)
    elif user_state == States.CLIENT_AMOUNT:
        process_amount(message)
    elif user_state == States.CLIENT_RECEIPT:
        skip_receipt(message)
    elif user_state == States.WITHDRAWAL_AMOUNT:
        process_withdrawal_amount(message)

def handle_media_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã)"""
    user_state = fsm.get_state(message.from_user.id, message.chat.id)
    
    if user_state == States.CLIENT_RECEIPT:
        process_receipt(message)

def handle_callback_query(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    user_state = fsm.get_state(call.from_user.id, call.message.chat.id)
    
    if user_state == States.CLIENT_MESSENGER:
        process_messenger(call)
    elif user_state == States.CLIENT_STATUS:
        process_status(call)
    elif user_state == States.CLIENT_CONFIRM:
        process_confirm(call)
    else:
        # –ï—Å–ª–∏ callback –Ω–µ —Å–≤—è–∑–∞–Ω —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        bot.answer_callback_query(call.id)

def process_phone(message: Message):
    """Process client phone"""
    # –î–æ–±–∞–≤–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"Processing phone from user {message.from_user.id}: {message.text}")
    
    phone = message.text.strip()
    
    if not is_phone(phone):
        logger.warning(f"Invalid phone format: {phone}")
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (10-15 —Å–∏–º–≤–æ–ª–æ–≤):")
        return
    
    logger.info(f"Phone validated successfully: {phone}")
    
    # Save phone to state data
    fsm.set_data(message.from_user.id, message.chat.id, 'phone', phone)
    logger.info(f"Phone saved to state data")
    
    fsm.set_state(message.from_user.id, message.chat.id, States.CLIENT_NAME)
    logger.info(f"State changed to CLIENT_NAME for user {message.from_user.id}")
    bot.reply_to(message, "üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞:")

def process_name(message: Message):
    """Process client name"""
    name = message.text.strip()
    
    if len(name) < 2:
        bot.reply_to(message, "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è. –í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞:")
        return
    
    # Save name to state data
    fsm.set_data(message.from_user.id, message.chat.id, 'name', name)
    
    # Show messenger options
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üì± Telegram", callback_data="messenger_telegram"),
        InlineKeyboardButton("üí¨ WhatsApp", callback_data="messenger_whatsapp"),
        InlineKeyboardButton("üìß –î—Ä—É–≥–æ–µ", callback_data="messenger_other")
    )
    
    fsm.set_state(message.from_user.id, message.chat.id, States.CLIENT_MESSENGER)
    bot.reply_to(message, "üì® –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –¥–ª—è —Å–≤—è–∑–∏:", reply_markup=keyboard)

def process_messenger(call: CallbackQuery):
    """Process messenger selection"""
    bot.answer_callback_query(call.id)
    
    messenger_map = {
        "messenger_telegram": "Telegram",
        "messenger_whatsapp": "WhatsApp",
        "messenger_other": "–î—Ä—É–≥–æ–µ"
    }
    
    messenger = messenger_map.get(call.data, "–î—Ä—É–≥–æ–µ")
    
    # Save messenger to state data
    fsm.set_data(call.from_user.id, call.message.chat.id, 'messenger', messenger)
    
    fsm.set_state(call.from_user.id, call.message.chat.id, States.CLIENT_ORDER_LINK)
    bot.edit_message_text(
        "üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:",
        call.message.chat.id,
        call.message.message_id
    )

def process_order_link(message: Message):
    """Process order link or description"""
    order_link = message.text.strip()
    
    if len(order_link) < 3:
        bot.reply_to(message, "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:")
        return
    
    # Save order_link to state data
    fsm.set_data(message.from_user.id, message.chat.id, 'order_link', order_link)
    
    fsm.set_state(message.from_user.id, message.chat.id, States.CLIENT_AMOUNT)
    bot.reply_to(message, "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ (–≤ —Ä—É–±–ª—è—Ö):")

def process_amount(message: Message):
    """Process order amount"""
    amount_str = message.text.strip()
    
    if not is_money(amount_str):
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 1000.50):")
        return
    
    amount = float(normalize_money(amount_str))
    
    if amount <= 0:
        bot.reply_to(message, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è:")
        return
    
    # Save amount to state data
    fsm.set_data(message.from_user.id, message.chat.id, 'amount', amount)
    
    # Show status options
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("ü§î –•–æ—á–µ—Ç –∫—É–ø–∏—Ç—å", callback_data="status_wants"),
        InlineKeyboardButton("‚è≥ –ñ–¥—ë–º –æ–ø–ª–∞—Ç—ã", callback_data="status_waiting"),
        InlineKeyboardButton("‚úÖ –û–ø–ª–∞—Ç–∏–ª", callback_data="status_paid")
    )
    
    fsm.set_state(message.from_user.id, message.chat.id, States.CLIENT_STATUS)
    bot.reply_to(message, "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:", reply_markup=keyboard)

def process_status(call: CallbackQuery):
    """Process status selection"""
    bot.answer_callback_query(call.id)
    
    status_map = {
        "status_wants": "—Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å",
        "status_waiting": "–∂–¥—ë–º –æ–ø–ª–∞—Ç—ã",
        "status_paid": "–æ–ø–ª–∞—Ç–∏–ª"
    }
    
    status = status_map.get(call.data, "—Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å")
    
    # Save status to state data
    fsm.set_data(call.from_user.id, call.message.chat.id, 'status', status)
    
    if status == "–æ–ø–ª–∞—Ç–∏–ª":
        fsm.set_state(call.from_user.id, call.message.chat.id, States.CLIENT_RECEIPT)
        bot.edit_message_text(
            "üìÑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ PDF —á–µ–∫–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
            call.message.chat.id,
            call.message.message_id
        )
    else:
        # Skip receipt step
        fsm.set_data(call.from_user.id, call.message.chat.id, 'receipt_url', '')
        show_confirmation(call.message.chat.id, call.from_user.id)

def process_receipt(message: Message):
    """Process receipt file"""
    try:
        file_id = None
        if message.photo:
            file_id = message.photo[-1].file_id
        elif message.document:
            file_id = message.document.file_id
        
        if file_id:
            # Upload to Google Drive
            receipt_url = receipts.save_receipt(bot, file_id)
            
            fsm.set_data(message.from_user.id, message.chat.id, 'receipt_url', receipt_url)
            
            bot.reply_to(message, "‚úÖ –ß–µ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
        else:
            fsm.set_data(message.from_user.id, message.chat.id, 'receipt_url', '')
        
        show_confirmation(message.chat.id, message.from_user.id)
        
    except Exception as e:
        logger.error(f"Error saving receipt: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–µ–∫–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —á–µ–∫–∞.")
        
        fsm.set_data(message.from_user.id, message.chat.id, 'receipt_url', '')
        
        show_confirmation(message.chat.id, message.from_user.id)

def skip_receipt(message: Message):
    """Skip receipt upload"""
    fsm.set_data(message.from_user.id, message.chat.id, 'receipt_url', '')
    
    show_confirmation(message.chat.id, message.from_user.id)

def show_confirmation(chat_id: int, user_id: int):
    """Show confirmation of client data"""
    data = fsm.get_data(user_id, chat_id)
    
    text = f"""üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:</b>

üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}
üë§ –§–ò–û: {data['name']}
üì® –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä: {data['messenger']}
üîó –ó–∞–∫–∞–∑: {data['order_link']}
üí∞ –°—É–º–º–∞: {data['amount']:.2f} ‚ÇΩ
üìã –°—Ç–∞—Ç—É—Å: {data['status']}
üìÑ –ß–µ–∫: {"–ï—Å—Ç—å" if data.get('receipt_url') else "–ù–µ—Ç"}"""
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm_save"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_cancel")
    )
    
    fsm.set_state(user_id, chat_id, States.CLIENT_CONFIRM)
    bot.send_message(chat_id, text, reply_markup=keyboard)

def process_confirm(call: CallbackQuery):
    """Process confirmation"""
    bot.answer_callback_query(call.id)
    
    if call.data == "confirm_save":
        save_client(call.message.chat.id, call.from_user.id)
    else:
        fsm.clear_state(call.from_user.id, call.message.chat.id)
        bot.edit_message_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", call.message.chat.id, call.message.message_id)

def save_client(chat_id: int, user_id: int):
    """Save client to spreadsheet"""
    try:
        data = fsm.get_data(user_id, chat_id)
        
        # Get worker info
        worker = sheets.get_worker(user_id)
        if not worker:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: —Ä–∞–±–æ—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # Calculate commission
        clients_count = worker.get('clients_count', 0)
        amount = data['amount']
        commission_amount = commission.calc(clients_count, amount)
        
        # Prepare client data
        client_data = {
            'worker_tg_id': user_id,
            'worker_username': worker.get('username', ''),
            'phone': data['phone'],
            'name': data['name'],
            'messenger': data['messenger'],
            'order_link': data['order_link'],
            'amount': amount,
            'status': data['status'],
            'receipt_url': data.get('receipt_url', ''),
            'timestamp': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
        
        # Save to sheets
        sheets.append_client_row(client_data)
        sheets.inc_clients_count(user_id)
        
        # Add commission to balance only if paid
        if data['status'] == '–æ–ø–ª–∞—Ç–∏–ª':
            sheets.inc_balance(user_id, commission_amount)
        
        # Notify admins
        notify_admins_new_client(client_data, commission_amount)
        
        bot.send_message(chat_id, f"‚úÖ –ö–ª–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω! –ö–æ–º–∏—Å—Å–∏—è: {commission_amount:.2f} ‚ÇΩ")
        
    except Exception as e:
        logger.error(f"Error saving client: {e}")
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞")
    
    finally:
        fsm.clear_state(user_id, chat_id)

def notify_admins_new_client(client_data: dict, commission: float):
    """Notify admins about new client"""
    from config import ADMIN_IDS
    
    text = f"""üìà <b>–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω</b>

üë§ –†–∞–±–æ—Ç–Ω–∏–∫: @{client_data['worker_username']}
üìû –ö–ª–∏–µ–Ω—Ç: {client_data['name']} ({client_data['phone']})
üí∞ –°—É–º–º–∞: {client_data['amount']:.2f} ‚ÇΩ
üíµ –ö–æ–º–∏—Å—Å–∏—è: {commission:.2f} ‚ÇΩ
üìã –°—Ç–∞—Ç—É—Å: {client_data['status']}"""
    
    for admin_id in ADMIN_IDS:
        try:
            bot.send_message(admin_id, text)
        except Exception as e:
            logger.error(f"Failed to notify admin {admin_id}: {e}")

def start_withdrawal(call: CallbackQuery):
    """Start withdrawal request"""
    bot.answer_callback_query(call.id)
    
    # Check worker balance
    worker = sheets.get_worker(call.from_user.id)
    if not worker:
        bot.send_message(call.message.chat.id, "‚ùå –†–∞–±–æ—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    balance = worker.get('balance', 0.0)
    if balance <= 0:
        bot.send_message(call.message.chat.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞")
        return
    
    fsm.set_state(call.from_user.id, call.message.chat.id, States.WITHDRAWAL_AMOUNT)
    bot.send_message(call.message.chat.id, f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:")

def process_withdrawal_amount(message: Message):
    """Process withdrawal amount"""
    try:
        amount_str = message.text.strip()
        
        if not is_money(amount_str):
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
            return
        
        amount = float(normalize_money(amount_str))
        
        if amount <= 0:
            bot.reply_to(message, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è:")
            return
        
        # Check balance
        worker = sheets.get_worker(message.from_user.id)
        balance = worker.get('balance', 0.0)
        
        if amount > balance:
            bot.reply_to(message, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ")
            return
        
        # Create withdrawal request
        withdrawal_id = sheets.create_withdrawal(message.from_user.id, amount)
        
        # Deduct from balance immediately
        sheets.inc_balance(message.from_user.id, -amount)
        
        # Notify admins
        notify_admins_withdrawal(message.from_user.id, worker.get('username', ''), amount, withdrawal_id)
        
        bot.reply_to(message, f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount:.2f} ‚ÇΩ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        
    except Exception as e:
        logger.error(f"Error processing withdrawal: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏")
    
    finally:
        fsm.clear_state(message.from_user.id, message.chat.id)

def notify_admins_withdrawal(tg_id: int, username: str, amount: float, withdrawal_id: int):
    """Notify admins about withdrawal request"""
    from config import ADMIN_IDS
    
    text = f"""üí∏ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>

üë§ –†–∞–±–æ—Ç–Ω–∏–∫: @{username} (ID: {tg_id})
üí∞ –°—É–º–º–∞: {amount:.2f} ‚ÇΩ
üÜî ID –∑–∞—è–≤–∫–∏: {withdrawal_id}"""
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –í—ã–ø–ª–∞—Ç–∏–ª", callback_data=f"withdraw_approve_{withdrawal_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑", callback_data=f"withdraw_decline_{withdrawal_id}")
    )
    
    for admin_id in ADMIN_IDS:
        try:
            bot.send_message(admin_id, text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"Failed to notify admin {admin_id}: {e}") 